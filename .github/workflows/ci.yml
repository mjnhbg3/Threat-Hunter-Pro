# =============================================================================
# RAG-Enhanced Threat Hunter Pro - Continuous Integration Pipeline
# =============================================================================
# This workflow provides comprehensive CI with testing, linting, security scanning,
# and quality gates to ensure code quality and reliability.

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

# Cancel previous runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  PYTHON_VERSIONS: '["3.9", "3.10", "3.11"]'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Pre-flight Checks
  # =============================================================================
  
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      python-versions: ${{ env.PYTHON_VERSIONS }}
      should-run-tests: ${{ steps.changes.outputs.code }}
      should-build-image: ${{ steps.changes.outputs.docker }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - '**/*.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
              - 'pytest.ini'
              - 'tests/**'
            docker:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
              - '.dockerignore'

      - name: Validate repository structure
        run: |
          echo "Validating repository structure..."
          required_files=(
            "requirements.txt"
            "Dockerfile"
            "docker-compose.yml"
            "pytest.ini"
            "main.py"
          )
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "ERROR: Required file $file is missing"
              exit 1
            fi
          done
          
          echo "Repository structure validation passed"

  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy bandit safety isort pylint

      - name: Code formatting check (Black)
        run: |
          echo "Checking code formatting with Black..."
          black --check --diff --color .
        continue-on-error: false

      - name: Import sorting check (isort)
        run: |
          echo "Checking import sorting with isort..."
          isort --check-only --diff --color .
        continue-on-error: false

      - name: Code style check (Flake8)
        run: |
          echo "Checking code style with Flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        continue-on-error: false

      - name: Type checking (MyPy)
        run: |
          echo "Running type checking with MyPy..."
          mypy . --ignore-missing-imports --show-error-codes
        continue-on-error: true

      - name: Code quality analysis (Pylint)
        run: |
          echo "Running code quality analysis with Pylint..."
          pylint --rcfile=.pylintrc --exit-zero $(find . -name "*.py" | head -20)
        continue-on-error: true

  # =============================================================================
  # Security Scanning
  # =============================================================================
  
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Security linting (Bandit)
        run: |
          echo "Running security analysis with Bandit..."
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt
        continue-on-error: true

      - name: Dependency vulnerability check (Safety)
        run: |
          echo "Checking dependencies for known vulnerabilities..."
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true

      - name: Static analysis (Semgrep)
        run: |
          echo "Running static analysis with Semgrep..."
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto .
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
          retention-days: 30

  # =============================================================================
  # Unit and Integration Tests
  # =============================================================================
  
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.pre-flight.outputs.python-versions) }}
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-benchmark
          pip install coverage[toml]

      - name: Download spaCy model
        run: |
          python -m spacy download en_core_web_sm

      - name: Create test directories
        run: |
          mkdir -p data/threat_hunter_db
          mkdir -p logs
          mkdir -p backups

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          REDIS_URL: redis://localhost:6379/0
        run: |
          echo "Running unit tests..."
          pytest tests/unit/ -v --cov=./ --cov-report=xml --cov-report=html
        continue-on-error: false

      - name: Run integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          REDIS_URL: redis://localhost:6379/0
        run: |
          echo "Running integration tests..."
          pytest tests/integration/ -v --cov=./ --cov-append --cov-report=xml
        continue-on-error: false

      - name: Run security tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          REDIS_URL: redis://localhost:6379/0
        run: |
          echo "Running security tests..."
          pytest tests/security/ -v --cov=./ --cov-append --cov-report=xml
        continue-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == env.PYTHON_VERSION
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml
          retention-days: 30

  # =============================================================================
  # Performance Testing
  # =============================================================================
  
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [pre-flight, test]
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark locust

      - name: Download spaCy model
        run: |
          python -m spacy download en_core_web_sm

      - name: Create test directories
        run: |
          mkdir -p data/threat_hunter_db
          mkdir -p logs

      - name: Run performance benchmarks
        env:
          PYTHONPATH: ${{ github.workspace }}
          REDIS_URL: redis://localhost:6379/0
        run: |
          echo "Running performance benchmarks..."
          pytest tests/performance/ -v --benchmark-json=benchmark-results.json
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 30

  # =============================================================================
  # Docker Build and Test
  # =============================================================================
  
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-flight
    if: needs.pre-flight.outputs.should-build-image == 'true' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          platforms: linux/amd64
          push: false
          tags: ${{ env.IMAGE_NAME }}:dev-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}
            VCS_REF=${{ github.sha }}

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}
            VCS_REF=${{ github.sha }}

      - name: Test Docker image
        run: |
          echo "Testing Docker image functionality..."
          docker run --rm --name test-container \
            -e PYTHONPATH=/app \
            ${{ env.IMAGE_NAME }}:dev-test \
            python -c "
          import sys
          import os
          sys.path.insert(0, '/app')
          
          # Test basic imports
          try:
              import fastapi
              import uvicorn
              import sentence_transformers
              print('✓ Core dependencies imported successfully')
          except ImportError as e:
              print(f'✗ Import error: {e}')
              sys.exit(1)
          
          # Test application structure
          required_files = ['/app/main.py', '/app/requirements.txt']
          for file_path in required_files:
              if not os.path.exists(file_path):
                  print(f'✗ Required file missing: {file_path}')
                  sys.exit(1)
          
          print('✓ Docker image validation passed')
          "

      - name: Run security scan on image
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # =============================================================================
  # Deployment Validation
  # =============================================================================
  
  deploy-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, security, test, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker Compose configuration
        run: |
          echo "Testing Docker Compose configuration..."
          
          # Test configuration syntax
          docker-compose -f docker-compose.yml config > /dev/null
          echo "✓ Docker Compose configuration is valid"
          
          # Test service dependencies
          docker-compose -f docker-compose.yml config --services
          echo "✓ All services are properly defined"

      - name: Test deployment health checks
        run: |
          echo "Testing deployment health check scripts..."
          
          if [[ -f "scripts/health_check.sh" ]]; then
            chmod +x scripts/health_check.sh
            # Test script syntax
            bash -n scripts/health_check.sh
            echo "✓ Health check script syntax is valid"
          fi

  # =============================================================================
  # Status Summary
  # =============================================================================
  
  ci-status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [pre-flight, lint, security, test, performance, docker, deploy-test]
    if: always()
    
    steps:
      - name: Determine overall status
        run: |
          echo "CI Pipeline Results Summary:"
          echo "=============================="
          
          # Check individual job results
          lint_result="${{ needs.lint.result }}"
          security_result="${{ needs.security.result }}"
          test_result="${{ needs.test.result }}"
          performance_result="${{ needs.performance.result }}"
          docker_result="${{ needs.docker.result }}"
          deploy_test_result="${{ needs.deploy-test.result }}"
          
          echo "Lint: $lint_result"
          echo "Security: $security_result"
          echo "Tests: $test_result"
          echo "Performance: $performance_result"
          echo "Docker: $docker_result"
          echo "Deploy Test: $deploy_test_result"
          
          # Determine if any critical jobs failed
          critical_failures=0
          
          if [[ "$lint_result" == "failure" ]]; then
            echo "❌ Code quality checks failed"
            critical_failures=$((critical_failures + 1))
          fi
          
          if [[ "$test_result" == "failure" ]]; then
            echo "❌ Tests failed"
            critical_failures=$((critical_failures + 1))
          fi
          
          if [[ "$docker_result" == "failure" ]]; then
            echo "❌ Docker build failed"
            critical_failures=$((critical_failures + 1))
          fi
          
          if [[ $critical_failures -gt 0 ]]; then
            echo "💥 CI pipeline failed with $critical_failures critical failures"
            exit 1
          else
            echo "✅ CI pipeline completed successfully"
          fi

      - name: Update commit status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const success = ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success' }};
            const state = success ? 'success' : 'failure';
            const description = success ? 'All CI checks passed' : 'CI checks failed';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'ci/pipeline'
            });