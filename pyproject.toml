# =============================================================================
# RAG-Enhanced Threat Hunter Pro - Python Package Configuration
# =============================================================================
# This file defines the package metadata, dependencies, and build configuration
# for distributing Threat Hunter Pro as a Python package.

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools>=65.0", "wheel"]
build-backend = "poetry.core.masonry.api"

# =============================================================================
# Project Metadata
# =============================================================================
[tool.poetry]
name = "threat-hunter-pro"
version = "1.0.0"
description = "RAG-Enhanced Threat Hunter Pro - AI-powered cybersecurity analysis with advanced RAG capabilities"
authors = ["Threat Hunter Pro Team <team@threathunterpro.com>"]
maintainers = ["Threat Hunter Pro Team <team@threathunterpro.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/threat-hunter-pro/threat-hunter-pro"
repository = "https://github.com/threat-hunter-pro/threat-hunter-pro"
documentation = "https://github.com/threat-hunter-pro/threat-hunter-pro/docs"
keywords = [
    "cybersecurity", 
    "threat-hunting", 
    "ai", 
    "rag", 
    "security-analysis", 
    "machine-learning",
    "vector-search",
    "nlp",
    "wazuh",
    "siem"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: Log Analysis",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Typing :: Typed"
]
packages = [
    { include = "threat_hunter_pro", from = "." },
    { include = "rag_interface" },
    { include = "hierarchical_summary" },
    { include = "security_pipeline" },
    { include = "auth" },
    { include = "secrets" },
    { include = "security" }
]
include = [
    "LICENSE",
    "README.md",
    "SECURITY.md",
    "requirements.txt",
    "config/*.yml",
    "config/*.yaml",
    "config/*.conf",
    "scripts/*.sh"
]
exclude = [
    "tests/",
    "docs/",
    ".github/",
    "docker-compose*.yml",
    "Dockerfile*",
    ".dockerignore",
    "*.log",
    "data/",
    "logs/",
    "backups/"
]

# =============================================================================
# Dependencies
# =============================================================================
[tool.poetry.dependencies]
python = "^3.9"

# Core web framework
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
python-multipart = "^0.0.6"
aiofiles = "^23.2.1"

# AI and ML dependencies
sentence-transformers = "^2.2.2"
google-generativeai = "^0.3.0"
spacy = "^3.7.0"
scikit-learn = "^1.3.0"

# Vector and search
faiss-cpu = "^1.7.4"
bm25s = "^0.2.0"
numpy = "^1.24.0"

# Data processing and storage
httpx = "^0.25.0"
redis = "^5.0.0"
zstandard = "^0.22.0"

# Security and authentication
cryptography = "^41.0.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"

# Monitoring and observability
prometheus-client = "^0.19.0"
psutil = "^5.9.6"

# Development dependencies (optional)
pytest = {version = "^7.4.0", optional = true}
pytest-cov = {version = "^4.1.0", optional = true}
pytest-asyncio = {version = "^0.21.0", optional = true}
pytest-benchmark = {version = "^4.0.0", optional = true}
black = {version = "^23.9.0", optional = true}
flake8 = {version = "^6.1.0", optional = true}
mypy = {version = "^1.6.0", optional = true}
bandit = {version = "^1.7.5", optional = true}
safety = {version = "^2.3.0", optional = true}
pre-commit = {version = "^3.5.0", optional = true}

[tool.poetry.extras]
dev = [
    "pytest", 
    "pytest-cov", 
    "pytest-asyncio", 
    "pytest-benchmark",
    "black", 
    "flake8", 
    "mypy", 
    "bandit", 
    "safety",
    "pre-commit"
]
test = ["pytest", "pytest-cov", "pytest-asyncio", "pytest-benchmark"]
lint = ["black", "flake8", "mypy", "bandit"]
security = ["bandit", "safety"]

# =============================================================================
# Console Scripts and Entry Points
# =============================================================================
[tool.poetry.scripts]
threat-hunter-pro = "main:main"
thunker = "thunker_cli:main"
rag-query = "rag_interface.cli:main"
security-scan = "security_pipeline.cli:main"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
pytest-benchmark = "^4.0.0"
black = "^23.9.0"
flake8 = "^6.1.0"
mypy = "^1.6.0"
bandit = "^1.7.5"
safety = "^2.3.0"
pre-commit = "^3.5.0"
locust = "^2.17.0"

# =============================================================================
# Tool Configurations
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # use of assert
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "spacy.*",
    "sentence_transformers.*",
    "faiss.*",
    "bm25s.*",
    "google.generativeai.*",
    "redis.*",
    "prometheus_client.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert and shell usage in tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=./",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-report=term-missing",
    "--cov-fail-under=85",
    "--benchmark-max-time=5",
    "--benchmark-columns=mean,median,stddev,rounds,iterations"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmark tests",
    "security: marks tests as security validation tests",
    "slow: marks tests as slow running",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "docs/*",
    ".venv/*",
    "venv/*",
    "setup.py",
    "conftest.py",
    "*/__init__.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = [
    "threat_hunter_pro",
    "rag_interface", 
    "hierarchical_summary",
    "security_pipeline",
    "auth",
    "secrets",
    "security"
]

# =============================================================================
# Security Configuration
# =============================================================================
[tool.safety]
# Ignore specific vulnerability IDs if they're false positives
# ignore = ["12345", "67890"]
output = "json"
json = true

# =============================================================================
# Performance and Benchmarking
# =============================================================================
[tool.pytest-benchmark]
min_rounds = 5
timer = "time.perf_counter"
calibration_precision = 10
warmup = false
warmup_iterations = 100000
disable_gc = false
sort = "mean"
histogram = true
save_data = true
json_file = "benchmark-results.json"

# =============================================================================
# Project URLs and Metadata
# =============================================================================
[tool.poetry.urls]
"Bug Tracker" = "https://github.com/threat-hunter-pro/threat-hunter-pro/issues"
"Security Policy" = "https://github.com/threat-hunter-pro/threat-hunter-pro/security"
"Documentation" = "https://github.com/threat-hunter-pro/threat-hunter-pro/docs"
"Release Notes" = "https://github.com/threat-hunter-pro/threat-hunter-pro/releases"
"CI/CD" = "https://github.com/threat-hunter-pro/threat-hunter-pro/actions"
"Docker Hub" = "https://hub.docker.com/r/threathunterpro/threat-hunter-pro"