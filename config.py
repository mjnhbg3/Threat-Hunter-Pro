"""
Configuration constants for Threat Hunter Pro.

This module encapsulates all static configuration values and
environment-derived parameters. Import from this module rather than
hard‑coding constants throughout the codebase.
"""

import os

# -----------------------------------------------------------------------------
# UI / Dashboard HTML
# -----------------------------------------------------------------------------
# The HTML template used for the dashboard UI lives in a separate module
# ``html_template.py``. Import ``HTML_CONTENT`` from that module when
# constructing responses in the FastAPI application.

# -----------------------------------------------------------------------------
# Default settings
# -----------------------------------------------------------------------------
DEFAULT_SETTINGS = {
    "processing_interval": 600,  # Changed to 10 minutes (600 seconds)
    "initial_scan_count": 200,  # Increased from 100 in the monolithic script
    "log_batch_size": 100_000,
    "search_k": 500,  # Increased from 200 for richer context
    "analysis_k": 500,  # Increased from 200 for richer context
    "max_issues": 1000,
    "max_output_tokens": 32000,  # NEW: Increased for longer responses and scripts
}

# -----------------------------------------------------------------------------
# File paths
# -----------------------------------------------------------------------------

# Location of the Wazuh alerts JSON file. This should point to the
# log file generated by Wazuh where alerts are appended. See the
# monolithic script documentation for details.
LOG_FILE = "/var/ossec/logs/alerts/alerts.json"

DB_DIR = "/var/ossec/integrations/threat_hunter_db"
LOG_POSITION_FILE = os.path.join(DB_DIR, "log_position.txt")
VECTOR_DB_FILE = os.path.join(DB_DIR, "vector_db.faiss")
METADATA_DB_FILE = os.path.join(DB_DIR, "metadata.json")
DASHBOARD_DATA_FILE = os.path.join(DB_DIR, "dashboard_data.json")
SETTINGS_FILE = os.path.join(DB_DIR, "settings.json")
IGNORED_ISSUES_FILE = os.path.join(DB_DIR, "ignored_issues.json")

# -----------------------------------------------------------------------------
# AI & Embedding Models
# -----------------------------------------------------------------------------

# Model identifiers used when communicating with Google Gemini. The values
# correspond to the correct 2.5 model identifiers.
LITE_MODEL = "gemini-2.5-flash-lite"
FULL_MODEL = "gemini-2.5-flash"
PRO_MODEL = "gemini-2.5-pro"

# Sentence embedding model used with sentence-transformers. If you wish to
# change the embedding model you can override this constant at runtime via
# environment variables.
EMBEDDING_MODEL_NAME = "Snowflake/snowflake-arctic-embed-m"

# Rate limiting quotas per model family (requests per minute, tokens per minute, requests per day).
# Google AI Studio Free Tier limits as of 2025:
MODEL_QUOTA = {
    "pro": (5, 250_000, 100),           # Gemini 2.5 Pro: 5 RPM, 250K TPM, 100 RPD
    "flash": (10, 250_000, 250),        # Gemini 2.5 Flash: 10 RPM, 250K TPM, 250 RPD  
    "flash-lite": (15, 250_000, 1000),  # Gemini 2.5 Flash-Lite: 15 RPM, 250K TPM, 1,000 RPD
}

# -----------------------------------------------------------------------------
# API keys / Authentication
# -----------------------------------------------------------------------------

# Read multiple Gemini API keys from environment variables. This allows
# rotation of keys when rate limits are hit. Keys are stored in
# ``GEMINI_API_KEYS`` in the order they appear in the environment.

GEMINI_API_KEYS: list[str] = []
api_key_1 = os.getenv("GEMINI_API_KEY")
api_key_2 = os.getenv("GEMINI_API_KEY_2")
api_key_3 = os.getenv("GEMINI_API_KEY_3")

if api_key_1:
    GEMINI_API_KEYS.append(api_key_1)
if api_key_2:
    GEMINI_API_KEYS.append(api_key_2)
if api_key_3:
    GEMINI_API_KEYS.append(api_key_3)

# Basic authentication credentials for the FastAPI application. If unset the
# application will refuse to start. See ``main.py`` for startup checks.
BASIC_AUTH_USER: str | None = os.getenv("BASIC_AUTH_USER")
BASIC_AUTH_PASS: str | None = os.getenv("BASIC_AUTH_PASS")

# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

# Quotas for each API key. If you wish to customise per‑key rate limits you
# can modify ``rpm_buckets`` and ``tpm_buckets`` within ``state.py``. The
# defaults are conservative values defined by Google for the Flash model.

# The rest of the configuration values (such as the HTML template) live in
# other modules within this package.